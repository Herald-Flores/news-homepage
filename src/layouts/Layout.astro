---
interface Props {
  title?: string,
	description?: string
}

const { title, description } = Astro.props
import Footer from '../components/Footer/Footer.astro';
import Header from '../components/Header/Header.astro';
import { ViewTransitions, fade, slide } from "astro:transitions";
---

<!doctype html>
<html lang='en' transition:animate="none">
  <head>
    <meta charset='UTF-8' />
    <meta name='description' content='Astro description' />
    <meta name='viewport' content='width=device-width' />
    <link rel='icon' type='image/svg+xml' href='/img/favicon-32x32.png' />
    <meta name='generator' content={Astro.generator} />
		<meta name="view-transition" content="same-origin" />
    <title>{title}</title>
		<meta name='description' content={description} />
		<ViewTransitions />
  </head>
  <body class="dark:bg-neutral-dark transition-all duration-500">
		<Header transition:persist/>
		<main class='box-border max-w-screen-xl mx-auto mt-2' transition:animate={fade({ duration: '0.5s' })}>
			<slot />
		</main>

		<Footer transition:persist/>

		<script>
			const themeToggles = document.querySelectorAll('[data-theme-toggle]')
			const themeToggleDarkIcon = document.getElementById('theme-toggle-dark-icon')
			const themeToggleLightIcon = document.getElementById('theme-toggle-light-icon')

			const getTheme = () => localStorage.getItem('color-theme') || 'light'

			const setTheme = (theme) => {
				document.documentElement.setAttribute('data-theme', theme)
				if (theme === 'dark') {
					document.documentElement.classList.add('dark')
				}	else {
					document.documentElement.classList.remove('dark')
				}
			}
			

			window.addEventListener('DOMContentLoaded', () => {
				setTheme(getTheme())
				toggleIconBTN(getTheme())
			})
			document.addEventListener('astro:after-swap', () => {
				setTheme(getTheme())
				toggleIconBTN(getTheme())
			})

			const toggleIconBTN = (theme) => {
				if (theme === 'dark') {
					themeToggleLightIcon.classList.remove('hidden')
					themeToggleDarkIcon.classList.add('hidden')
				} else {
					themeToggleLightIcon.classList.add('hidden')
					themeToggleDarkIcon.classList.remove('hidden')
				}
			}

			themeToggles.forEach((toggle) => {
				toggle.addEventListener('click', () => {
					const nextTheme = getTheme() === 'light' ? 'dark' : 'light'
					toggleIconBTN(nextTheme)

					localStorage.setItem('color-theme', nextTheme)
					setTheme(nextTheme)
				})
			})
		</script>
  </body>
</html>

